#+title:Emacs基础入门
#+author: YukikazeQED
#+data: 2024-03-14
#+description: 这是我使用Emacs两个月所做的笔记. 我自认为已经基础入门了Emacs, 并且实实在在地从emacs中获取到了乐趣. 
* 我为何选择使用emacs? 
实际上我很早就了解到Vim和Emacs这两个具有非常高自由度的编辑器, 且在它们的熟练使用者中口碑很好. 出于学习(折腾), 我去学习 emacs. 为何不是Vim呢, 因为我朋友使用Vim(准确来说是NeoVim). 我总是会选择和朋友们使用不同的工具, 这样我就能接触更多东西. 当然也有一些技术因素, 例如: 
1. 我略微体验过vi和emacs作为编辑器的使用后, 觉得还是emacs的逻辑更适合我.
2. emacs的配置和插件开发依赖一门lisp语言(emacs-lisp), 而那时我在学习scheme. 实际上在接触一段时间后, 就会体会到, emacs是一个可以读取文本文件内容到buffer并且调用各种函数对文本进行处理的软件. 
3. 我的日常工作需要和Latex, 编程, 理学笔记打交道, 这些都是文本编辑. 我希望能有一个软件满足这些全部文本编辑需求(那么就有vscode, vim, emacs可选, 我同时也使用vscode)
感觉最终还是朋友的因素更大(笑).
* 如何入门emacs?
** 操作系统说明
我最早接触到的系统是Windows98, 后来我开始进入大学接触到科学研究和写作, 逐渐转向Linux系统. 现在我是Linux系统用户, 最开始使用Debian系统, 我在使用一段时间后转向了Arch Linux. 原因有五:
1. 最后一次升级Debian时涉及linux内核, 它升级失败了, 反而把linux内核删去了. 这使得我不得不需要重装系统.
2. Debian stable的软件相对来说比较老, 比如编译器. 而滚动版不如去体验Arch Linux.
3. 我身边两个Arch Linux教徒, 而且我很喜欢他们.
4. Arch Linux和Debian一样, 是纯社区驱动的. 我不喜欢那些以公司开发的Linux发行版, 如Ubuntu, openSUSE. 
5. 朋友愿意从凌晨12点陪我装系统到凌晨4点.
6. 我对自由软件更具有好感度, 而Linux系统安装使用自由软件相比Windows更方便. 
** Emacs发行版说明
Emacs是自由软件, 所以类似Linux, 它也有若干根据GNU Emacs原版改进而来的Emacs发行版. 比较好用的有Doom Emacs和Spacemace. 你也可以尝试这些发行版, 它们也非常优秀. 本文是关于GNU Emacs的, 你可以理解为原汁原味的Emacs.

所以之后的教程我都是以Arch Linux系统为例, 其他Linux发行版大部分的区别只有系统包管理器. 
** 安装emacs
emacs比Linux系统古老, 且是一个经久不衰的自由软件, 那么它一定会在你使用的Linux发行版的软件仓库中. 使用你的系统包管理器安装之. 
#+begin_example
sudo pacman -S emacs
#+end_example
首先要打开emacs, 如果你不在桌面环境, 如tty, 那么在终端输入 =emacs= 就可以打开文字终端的emacs, 否则打开的是图形界面的emacs. 顺便说一下, 因为一些阴差阳错的原因, 我和朋友装Arch Linux的时候是先装了emacs再装的系统(笑,达成成就:在有系统之前使用emacs). 

如果在桌面提供的终端(如Konsole), 那么, 这将打开图形界面的emacs. 如果你使用桌面环境, 那么也建议你绑定一个打开emacs的快捷键, 比如我在KDE桌面中是 =Ctrl+Alt+T= 打开Konsole, =Ctrl+Alt+E= 打开emacs. 

如果要明确打开文字终端, 则使用 =emacs -nw= , nw就是no windows. 在 =emacs= 或 =emacs -nw= 后附加文件名就是打开对应文件(当前用户权限), 如有必要请使用sudo提权, 否则就是只读的.
** emacs键位说明
在emacs宇宙中, 我们会用到5个功能键:Ctrl, Meta, Super, Shitf, Hyper. 对于新时代的计算机使用者, 你可能只在键盘上看到过Ctrl, Shitf. 实际上, Hyper键位已经在现代键盘中消失了.

在国内, 因为微软的强势垄断, 市面上的键盘往往是美式键盘布局, 而且除了Alt键还会有一个win标键位(在window系统中用于打开开始菜单). 对于这种键盘布局, Alt键就是Emacs的Meta键位, Win标键就是Emacs的Super键位. 在emacs宇宙中, 我们用C简写Ctrl, S简写Shift, s简写Super, M简写Meta, H简写Hyper; 用 =C-x= 表示按住Ctrl后按住x. 用 =RET= 表示回车. 

在Emacs中我们只会用到Ctrl,Meta,Shitf,Super键位很少(因为Super键位在任何系统中都被一些重要组件使用如Windows的Win+R打开 运行),Hyper键位因为从键盘上消失了,所以Emacs本身没有哪一个功能会用Hyper键触发,也没有设定哪个键位是Hyper键.

注意:
1. emacs允许你重新绑定快捷键, 但我极其反对使用Super键和绑定Hyper键位.\\
   主键盘区是基本字符输入, 功能键被其他软件使用, 控制键区是所有软件通用的, 不应该修改原本的用意, 小键盘区和主键盘区的符号键位对应.
2. 许多教程上来就教各种快捷键, 这除了让人打退堂鼓外没有任何用处, 实际上emacs最需要使用的键位只有emacs官方教程中涉及到的键位. 而这些快捷键只有约20个.
3. emacs绝大部分功能使用的只有主键盘区, 当你熟悉后就会觉得这种设计非常优秀. 因为你的手无需大幅度移动.
4. 上述键位只是emacs宇宙的世界观, 不是操作系统的设定,如win键在KDE看来是Meta.
** 打开emacs官方教程
如果你没有对emacs进行任何修改, 那么打开emacs之后就进入了它的欢迎界面, 你应该可以看到 *emacs tutorial*, 使用方向键或鼠标移动光标到这里, 而后点击或回车. 如果你的系统语言是中文, 那么打开的就应该是中文教程(社区翻译,非常高质量). 不过考虑到tty的问题, 许多Linux用户会设置系统语言为英语以避免tty乱码. 在这种情况下使用 =M-x help-with-tutorial-spec-language RET= 而后输入 =Chinese-GB=.

多读几遍官方教程, 你就可以愉快地使用emacs作为一个基本的文本编辑器了. 我在这里补充说明几项注意:
1. 你不需要一下子全部记住教程提到的全部快捷键, 而是看完两三遍后就开始使用emacs作为文本编辑器.\\
   我不知道读者此前会用Windows的记事本之类的软件做什么, 至少我会用记事本来做一些TODO列表,备忘录.\\
   实在找不到活可以用文本编辑器写代码, 然后用控制台编译. 特别是通用Linux系统用户, 你最好对你的工具链有充分的了解.
2. 补充说明复制粘贴:
   - 复制: M-w
   - 剪切(把内容放进Killing 环):C-w
   - 粘贴(把内容从Killing 环拿回来):C-y
   不建议使用CUA mode(/Options->[]CUA mode/), 因为绝大部分人没有改键位, 绝大部分你能找到的内容都默认你使用默认基础键位.
3. 补充字体放大缩小: =C-x C-+= 字体放大, =C-x C--= 字体缩小.
4. 推荐设置Emacs使用等宽字体. 西文所有字符都是一样宽的, 所以对于西文使用者\开发者, 它们一般不会考虑到字体宽度问题.\\
   可CJK使用者会和西文混写, 这时方块字和拼音文字宽度的问题就会凸显.在系统中,方块字宽度被视为两倍西文字母宽度.\\
   但有些西文字体没有CJK, 而它们的字宽的两倍不是CJK所用字体的宽度, 这就影响排版(特别是表格排版).\\
   比较推荐的是思源简体字体(Sans Mono CJK SC). 最简单的设置就是修改系统默认字体为思源字体, 因为Emacs默认使用系统字体.\\
   这样做的理由是: 你长期使用的等宽字体一定是看着顺眼的, 既然是看着顺眼的, 为何不系统全局使用.
5. 觉得 =C-@= 麻烦的可以修改输入法切换快捷键为 Shift. 这样可以使用 =C- space= 来选择文本, 好处是左手移动量减少, 且Shift切换符合Windows老用户习惯.
6. 善用emacs自带的帮助: =C-h ?= 展示C-h帮助的使用说明, 然后你可以通过看使用说明知道如何获取帮助.
7. Frame, buffer相关基础操作:
   - =C-x 2= 光标所在frame划分为上下两个相同的frame
   - =C-x 3= 光标所在frame划分为左右两个相同的frame
   - =C-x 1= 只保留光标所在的frame(buffer不删除)
   - =C-x o= 按顺序光标跳转到别的frame
   - =C-x C-b= 列出所有buffer
   - =C-x b RET buffer-name= 光标当前frame显示buffer-name内容
   - =C-x k RET buffer-name= 关闭buffer
8. 控制台相关操作:
   - =M-x eshell RET= 光标当前frame显示为一个终端.
   - 如果在文字终端, 可用 =Ctrl-z= 挂起编辑器, 回到终端. 而后使用 =jobs= 查看当前在后台的进程, 使用 =fg %i= 恢复第i个进程.
* 最后
欢迎进入Emacs宇宙. 接下来我会讲解如何进行Emacs配置并且分如下专题叙述:
1. 编程配置, 特别是C/C++ + CMake工作流, python配置.
2. 基于AUCTex+CDLatex的Latex工作流.
3. Org-mode纯文本生活.
   
